"use client"

// Define the base URL for Gemini API - Updated to use Gemini 2.5 Flash (1.5 Flash is deprecated)
const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent"

// Helper function to generate text using Gemini API
export async function generateText({
  prompt,
  temperature = 0,
  maxTokens = 1000,
}: {
  prompt: string
  temperature?: number
  maxTokens?: number
}) {
  const GEMINI_API_KEY = process.env.GEMINI_API_KEY
  if (!GEMINI_API_KEY) {
    throw new Error("GEMINI_API_KEY environment variable is not set.")
  }

  const url = `${GEMINI_API_URL}?key=${GEMINI_API_KEY}`

  try {
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        contents: [
          {
            role: "user",
            parts: [{ text: prompt }],
          },
        ],
        generationConfig: {
          temperature,
          maxOutputTokens: maxTokens,
          topP: 1,
          topK: 1,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE",
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE",
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE",
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE",
          },
        ],
      }),
    })

    if (!response.ok) {
      let errorMessage = `API request failed with status ${response.status}`
      try {
        const errorData = await response.json()
        errorMessage += `: ${JSON.stringify(errorData)}`

        // Check for specific Gemini API error types
        if (errorData.error) {
          if (errorData.error.code === 429) {
            errorMessage = "Rate limit exceeded. Please try again later."
          } else if (errorData.error.code === 400) {
            errorMessage = "Invalid request to Gemini API. Please check your inputs."
          } else if (errorData.error.message) {
            errorMessage = `Gemini API error: ${errorData.error.message}`
          }
        }
      } catch {
        // If we can't parse the error as JSON, just use the status code
      }
      throw new Error(errorMessage)
    }

    const data = await response.json()

    // Check for safety ratings that might have blocked generation
    if (data.promptFeedback && data.promptFeedback.blockReason) {
      throw new Error(`Content blocked by Gemini API: ${data.promptFeedback.blockReason}`)
    }

    // Check if we have a valid response
    if (!data.candidates || data.candidates.length === 0) {
      throw new Error("No response generated by Gemini API")
    }

    // Check for finish reason
    if (data.candidates[0].finishReason && data.candidates[0].finishReason !== "STOP") {
      console.warn(`Generation did not complete normally: ${data.candidates[0].finishReason}`)
    }

    const content = data.candidates[0]?.content?.parts?.[0]?.text

    if (!content) {
      throw new Error("No content returned from the API")
    }

    return { text: content }
  } catch (error) {
    console.error("Error generating text with Gemini:", error)
    throw error
  }
}

// Helper function to generate embeddings using Gemini API
export async function generateEmbedding(text: string): Promise<number[]> {
  const GEMINI_API_KEY = process.env.GEMINI_API_KEY
  if (!GEMINI_API_KEY) {
    throw new Error("GEMINI_API_KEY environment variable is not set.")
  }

  const url = `https://generativelanguage.googleapis.com/v1beta/models/embedding-001:embedContent?key=${GEMINI_API_KEY}`

  try {
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        content: {
          parts: [{ text }],
        },
      }),
    })

    if (!response.ok) {
      throw new Error(`Embedding API request failed with status ${response.status}`)
    }

    const data = await response.json()
    return data.embedding.values
  } catch (error) {
    console.error("Error generating embedding with Gemini:", error)
    throw error
  }
} 
